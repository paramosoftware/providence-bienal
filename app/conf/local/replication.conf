# Location of replication log files
replication_log = <ca_base_dir>/app/log/replication.log
replication_debug_log = <ca_base_dir>/app/log/replication_debug.log

# Maximum size of a log sync "chunk" transaction (as number of log entries)
chunk_size = 100

# When "push_missing" option is set telescoping will attempt to bundle all changes
# made to a field or label over its history into a single update. This can significantly
# speed up replication, but detailed change history will not be preserved.
telescope = 0

# Maximum number of times to retry a failed media upload
max_media_upload_retries = 5

# If media upload fails after retries, abort sync?
abort_sync_on_failed_media_upload = 1

sources = {
	testsource = {
		url = http://192.168.1.140/ca2/,
		service_user = replicador,
		service_key = LC1ykA3ingHzVj,
		#from_log_id = 18313327,
		from_log_timestamp = 2024-10-10,

		onlyTables = [
			ca_attributes, 
			ca_attribute_values,
			ca_objects, 
			ca_object_labels, 
			ca_entities, 
			ca_entity_labels,                 
			ca_objects_x_entities,
			ca_object_representations, 
			ca_object_representation_labels, 
			ca_objects_x_object_representations,
			ca_sets, 
			ca_set_items, 
			ca_set_labels, 
			ca_set_item_labels, 
			ca_objects_x_vocabulary_terms,
			ca_lists,
			ca_list_labels,
			ca_list_items,
			ca_list_item_labels,
        ],
		
		filter_on_access_settings = [1],

		skipIfExpression = {
			#ca_objects = "^ca_objects.type_id =~ /image/",
		},

        push_missing = 1,

		push_media = 1
	}
}

targets = {
	testtarget = {
		url = http://192.168.1.139/ca2,
		service_user = fredcamargo@yahoo.com,
		service_key = frederico,

		setIntrinsics = {
			# __default__ = {
# 				ca_objects = {
# 					source_id = external
# 				}
# 			},
# 			29f91051-3833-4e45-892e-7e833d9af4f0 = {
# 				ca_objects = {
# 					source_id = internal
# 				}
# 			}
		},

		#deduplicateAfterReplication = [ca_entities],
	}
}
